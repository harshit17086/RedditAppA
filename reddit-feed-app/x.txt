
create table public.users (
  id uuid primary key references auth.users(id) on delete cascade,
  email text unique,
  full_name text,
  
  created_at timestamp with time zone default timezone('utc'::text, now())
);

create table public.posts (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references public.users(id) on delete cascade,
  title text not null,
  description text,
  tags text[],
  image_url text,
  location text,
  created_at timestamp with time zone default timezone('utc'::text, now()),
  updated_at timestamp with time zone default timezone('utc'::text, now())
);

create table public.user_interests (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references public.users(id) on delete cascade,
  tag text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()),
  unique(user_id, tag)
);

alter table public.posts enable row level security;
alter table public.user_interests enable row level security;

create policy "Users can view all posts"
  on public.posts
  for select
  using (true);

create policy "Users can insert their own posts"
  on public.posts
  for insert
  with check (auth.uid() = user_id);

create policy "Users can update their own posts"
  on public.posts
  for update
  using (auth.uid() = user_id);

create policy "Users can delete their own posts"
  on public.posts
  for delete
  using (auth.uid() = user_id);

create policy "Users can manage their own interests"
  on public.user_interests
  for all
  using (auth.uid() = user_id);

-- Storage policies for image uploads
-- Allow authenticated users to upload images
create policy "Users can upload images"
  on storage.objects
  for insert
  with check (auth.role() = 'authenticated' and bucket_id = 'post-images');

-- Allow public read access to images
create policy "Public read access to images"
  on storage.objects
  for select
  using (bucket_id = 'post-images');

-- Allow users to update their own uploaded images
create policy "Users can update their images"
  on storage.objects
  for update
  using (auth.role() = 'authenticated' and bucket_id = 'post-images');

-- Allow users to delete their own uploaded images
create policy "Users can delete their images"
  on storage.objects
  for delete
  using (auth.role() = 'authenticated' and bucket_id = 'post-images');